{
  "name": "TMath",
  "tagline": "A small math library based on Taylor series approximations.",
  "body": "# TMath [![Build status](https://travis-ci.org/lnsp/tmath.svg?branch=stable)](https://travis-ci.org/lnsp/tmath)\r\nA small math function collection based on the Taylor expansion series.\r\n\r\n## Building the project\r\n- Download the source files from the `master`-tree\r\n- To build the project, you need to have `g++` and `make` installed\r\n- And you need to run `export CC=g++`\r\n- If everything is ready, run `make all` and ...\r\n- ... your `libtmath.a` library file is ready in the `build` folder\r\n\r\n## How to use\r\nJust build it as described above, include the header files and link the library. The library uses the types `TMath::DOUBLE`(`long double`) and `TMath::LONG`(`long long`) for parameters and return values.\r\n\r\n## What is included?\r\n### Mathematical functions\r\n\r\nFunction                                | Description\r\n:-------------------------------------: | ---------------------------------------------------------\r\n`sin(DOUBLE x)`                         | sine of x\r\n`asin(DOUBLE x)`                        | arcsine of x\r\n`sinh(DOUBLE x)`                        | hyperbolic sine of x\r\n`cos(DOUBLE x)`                         | cosine of x\r\n`acos(DOUBLE x)`                        | arccosine of x\r\n`cosh(DOUBLE x)`                        | hyperbolic cosine of x\r\n`tan(DOUBLE x)`                         | tangent of x\r\n`atan(DOUBLE x)`                        | arctangent of x\r\n`cot(DOUBLE x)`                         | cotangent of x\r\n`acot(DOUBLE x)`                        | arccotangent of x\r\n`coth(DOUBLE x)`                        | hyperbolic cotangent of x\r\n`sec(DOUBLE x)`                         | secant of x\r\n`asec(DOUBLE x)`                        | arcsecant of x\r\n`sech(DOUBLE x)`                        | hyperbolic secant of x\r\n`cosec(DOUBLE x)`                       | cosecant of x\r\n`acsc(DOUBLE x)`                        | arccosecant of x\r\n`csch(DOUBLE x)`                        | hyperbolic cosecant of x\r\n`floor(DOUBLE x)`                       | next lower integer of x\r\n`ceil(DOUBLE x)`                        | next higher integer of x\r\n`mod(LONG x, LONG y)`                   | the remainder of the division x / y\r\n`exp(DOUBLE x)`                         | natural exponential function\r\n`sqrt(DOUBLE x)`                        | squareroot of x\r\n`root(DOUBLE x, DOUBLE n)`              | n-th root of x\r\n`ln(DOUBLE x)`                          | natural logarithm of x\r\n`lg(DOUBLE x)`                          | common logarithm of x\r\n`lb(DOUBLE x)`                          | binary logarithm of x\r\n`log(DOUBLE x, DOUBLE n)`               | logarithm with base n of x\r\n`pow(DOUBLE x, DOUBLE n)`               | x to the power of n\r\n`pow(LONG x, LONG n)`                   | x to the power of n\r\n`pow(DOUBLE x, LONG n)`                 | x to the power of n\r\n`fac(LONG n)`                           | factorial of n\r\n`facd(LONG n)`                          | factorial of n using floating point\r\n`oddfac(LONG n)`                        | odd-factorial of n\r\n`oddfacd(LONG n)`                       | odd-factorial of n using floating point\r\n`rad(DOUBLE x)`                         | degrees to radiant\r\n`deg(DOUBLE x)`                         | radiant to degrees\r\n`abs(DOUBLE x)`                         | absolute value of x\r\n`equal(DOUBLE x, DOUBLE y)`             | floating-point number equality\r\n`equal(DOUBLE x, DOUBLE y, DOUBLE eps)` | floating-point number equality with a variance of epsilon\r\n\r\n### Vector class\r\nTo initialize a new vector just use initializer lists (like `Vector {1, 2, 3}`) or create a null-vector using `Vector(n)` (where n is the number of dimensions).\r\n\r\nOperation       | Description\r\n--------------- | -------------------------------------------------------------\r\n`a[n]`          | Access the n-th element of the vector `a`\r\n`a + b`         | Adds vector `a` and `b`\r\n`a - b`         | Subtracts vector `a` from `b`\r\n`a * s`         | Scales the vector by the factor `s`\r\n`a / s`         | Scales the vector by the factor `1 / s`\r\n`a == b`        | Tests if vector `a` is equal to `b`\r\n`a != b`        | Tests if vector `a` is not equal to `b`\r\n`a.equal(b, e)` | Tests if the vector `a` is equal to `b` with the accuracy `e`\r\n`a.dot(b)`      | Dot product of `a` and `b`.\r\n`a.cross(b)`    | Cross product of `a` and `b`\r\n`a.norm()`      | Normalized copy of the vector `a`\r\n`a.length()`    | Length of vector `a`\r\n`a.dim()`       | Dimensions of vector `a`\r\n`a.to_string()` | Generates a string representation of the vector `a`\r\n\r\n## What is planned?\r\n- Statistics (planned for v0.3)\r\n- Matrices (planned for v0.3)\r\n- Matrix operations (planned for v0.3)\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}